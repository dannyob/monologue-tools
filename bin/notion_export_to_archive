#!/usr/bin/env python

import sys
import subprocess

import datetime
import os
import os.path
import re
from pathlib import Path
from markdown import Markdown
import requests
import json
from zipfile import ZipFile
import transformnotion

BUTTONDOWN_API_KEY = os.getenv(
    "BUTTONDOWN_API_KEY", ""
)  # Get Buttondown API key from environment variable or default to empty string


def get_draft_emails_info():
    headers = {
        "Authorization": f"Token {BUTTONDOWN_API_KEY}",
    }
    response = requests.get("https://api.buttondown.email/v1/emails?status=draft", headers=headers)
    if response.status_code != 200:
        raise Exception(f"Failed to fetch emails: {response.status_code}")

    emails = response.json()['results']
    draft_emails_info = {}
    for email in emails:
        print(email["status"])
        if email["status"] == "draft":
            subject = email["subject"]
            date_match = re.search(r"\d{4}-\d{2}-\d{2}", subject)
            if date_match:
                iso_date = date_match.group(0)
                draft_emails_info[iso_date] = email
    return draft_emails_info


def create_buttondown_draft(subject, body, mail_id = None):
    headers = {
        "Authorization": f"Token {BUTTONDOWN_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {
        "subject": subject,
        "body": body,
        "status": "draft",
    }
    if mail_id:
        response = requests.patch(
                f"https://api.buttondown.email/v1/emails/{mail_id}", headers=headers, data=json.dumps(data)
                )
    else:
        response = requests.post(
                "https://api.buttondown.email/v1/emails", headers=headers, data=json.dumps(data)
                )
    print("Buttondown: https://buttondown.email/emails")
    if response.status_code == 201:
        print(f"Draft email created at Buttondown with subject: {subject}")
    elif response.status_code == 200:
        print(f"Draft email updated at Buttondown with subject: {subject}")
    elif response.headers.get("Content-Type", "").startswith("text/"):
        print(f"Failed to create draft email at Buttondown: {response.text}")
    else:
        print(f"Failed to create draft email at Buttondown: {response.status_code}")



def export_notion_to_markdown(notion_url, inbox_path):
    notion_id = notion_url.rsplit("/", 1)[-1]
    output_filename = inbox_path / f"{notion_id}.md"
    with open(output_filename, "w") as output_file:
        process = subprocess.run(["notion-exporter", notion_url], stdout=output_file)
    if process.returncode != 0:
        raise Exception("Failed to export Notion page to markdown.")
    return output_filename


if not BUTTONDOWN_API_KEY:
    raise EnvironmentError("BUTTONDOWN_API_KEY environment variable not set.")

current_file_path = Path(__file__).resolve().parent

tmp_dir = Path.home() / "tmp"
ROOT_DIR = current_file_path / ".."
archive_path = ROOT_DIR / "daily/archive"
inbox_path = ROOT_DIR / "daily/inbox"

if len(sys.argv) > 1:
    notion_url = sys.argv[1]
    if notion_url.startswith("https://www.notion.so/filecoin/"):
        print(f"Exporting Notion page: {notion_url}")
        exported_file = export_notion_to_markdown(notion_url, inbox_path)
        print(f"Exported to {exported_file}")
    else:
        print("I only know how to export notion pages")
        sys.exit(1)

if not archive_path.exists():
    raise FileNotFoundError(f"Could not find the specified file: {archive_path}")

if not inbox_path.exists():
    raise FileNotFoundError(f"Could not find the specified file: {inbox_path}")

md = Markdown(extensions=["meta"])

required_metadata = ["notion-id", "last-modified", "subject"]

archive_files_by_notion_id = {}

for the_file in archive_path.glob("*.md"):
    with open(the_file, "r") as file:
        markdown_content = md.convert(file.read())
    metadata = md.Meta
    if not all(elem in metadata.keys() for elem in required_metadata):
        raise Exception(f"{the_file} does not have all the metadata")
    archive_files_by_notion_id[metadata["notion-id"][0]] = {
        "filename": the_file,
        **metadata,
    }

for the_file in inbox_path.glob("*.zip"):
    with ZipFile(the_file, "r") as zip_file:
        zip_file.extractall(inbox_path)
    os.remove(the_file)

    # Skip the rest of the processing if a Notion URL was provided
    if len(sys.argv) > 1 and sys.argv[1].startswith("https://www.notion.so/filecoin/"):
        continue


def find_first_line_with_hash(file_path):
    with open(file_path, "r") as file:
        for line in file:
            if line.startswith("#"):
                date_match = re.search(r"\d{4}-\d{2}-\d{2}", line)
                if date_match:
                    return line[
                        date_match.start() :
                    ].strip()  # Strip everything before the date
                else:
                    raise ValueError(
                        f"Subject line does not contain a valid date: {line}"
                    )
    return ""


def filename_to_notion_id(fname):
    match = re.search(r"([a-fA-F0-9]{32})", str(fname))
    if not match:
        raise TypeError(f"Could not find notion id in {fname}")
    return f"https://notion.so/filecoin/{match.group(1)}"


for the_file in inbox_path.glob("*.md"):
    notion_id = filename_to_notion_id(the_file)
    last_modified = datetime.datetime.isoformat(
        datetime.datetime.fromtimestamp(
            os.path.getmtime(the_file), datetime.timezone.utc
        )
    )
    subject = find_first_line_with_hash(the_file)
    if notion_id in archive_files_by_notion_id:
        if last_modified <= archive_files_by_notion_id[notion_id]["last-modified"][0]:
            continue
        os.remove(archive_files_by_notion_id[notion_id]["filename"])
    # Extract the date from the subject and format it correctly
    date_match = re.search(r"\d{4}-\d{2}-\d{2}", subject)
    if date_match:
        formatted_date = date_match.group(0)
    else:
        raise ValueError(f"Subject line does not contain a valid date: {subject}")
    fname = formatted_date + ".md"
    with open(archive_path / fname, "w") as the_output_file:
        the_output_file.write(f"Notion-Id: {notion_id}\n")
        the_output_file.write(f"Last-Modified: {last_modified}\n")
        the_output_file.write(f"Subject: {subject}\n\n")
        with open(the_file, "r") as the_input_file:
            while True:
                the_line = the_input_file.readline()
                if the_line.startswith("##"):  # Skip everything until a headline 2
                    break
            the_output_file.write(the_line)
            rendered_markdown = transformnotion.transform_markdown(the_input_file)
            the_output_file.write(rendered_markdown)
            m= get_draft_emails_info()
            if formatted_date in m:
                draft_id = m[formatted_date]["id"]
                create_buttondown_draft(subject, the_line + rendered_markdown, draft_id)
            else:
                create_buttondown_draft(subject, the_line + rendered_markdown)
    print(f"Written: {archive_path}/{fname}")
